package org.apache.sling.discovery.impl;


import java.net.URL;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Properties;

import javax.servlet.Servlet;

import org.apache.felix.dm.DependencyActivatorBase;
import org.apache.felix.dm.DependencyManager;
import org.apache.felix.webconsole.WebConsoleConstants;
import org.apache.sling.api.resource.ResourceResolverFactory;
import org.apache.sling.commons.scheduler.Scheduler;
import org.apache.sling.discovery.DiscoveryService;
import org.apache.sling.discovery.PropertyProvider;
import org.apache.sling.discovery.TopologyEventListener;
import org.apache.sling.discovery.base.commons.ClusterViewService;
import org.apache.sling.discovery.base.connectors.BaseConfig;
import org.apache.sling.discovery.base.connectors.announcement.AnnouncementRegistry;
import org.apache.sling.discovery.base.connectors.ping.ConnectorRegistry;
import org.apache.sling.discovery.commons.providers.spi.base.DiscoveryLiteConfig;
import org.apache.sling.discovery.commons.providers.spi.base.SyncTokenService;
import org.apache.sling.discovery.impl.cluster.ClusterViewServiceImpl;
import org.apache.sling.discovery.impl.common.heartbeat.HeartbeatHandler;
import org.apache.sling.settings.SlingSettingsService;
import org.apache.felix.dm.Component;
import org.osgi.framework.BundleContext;
import org.osgi.framework.Constants;
import org.osgi.service.http.HttpService;

public class Activator extends DependencyActivatorBase {

	@Override
	public void destroy(BundleContext arg0, DependencyManager arg1) throws Exception {

	}

	@Override
	public void init(BundleContext arg0, DependencyManager dm) throws Exception {
		//DiscoveryServiceImpl
		Properties properties = new Properties();
		properties.put(Constants.SERVICE_VENDOR, "The Apache Software Foundation");
		Component component = dm.createComponent()
				.setInterface(new String[]{ DiscoveryService.class.getName(), DiscoveryServiceImpl.class.getName() }, properties)
				.setImplementation(DiscoveryServiceImpl.class)
				.setCallbacks(null,"activate","deactivate", null)//init, start, stop and destroy.
	            .add(createServiceDependency()
	                	.setService(SlingSettingsService.class)
	                	.setRequired(true))
	            .add(createServiceDependency()
	                	.setService(TopologyEventListener.class)
	                	.setRequired(true))
	            .add(createServiceDependency()
	                	.setService(ResourceResolverFactory.class)
	                	.setRequired(true))
	            .add(createServiceDependency()
	                	.setService(Scheduler.class)
	                	.setRequired(true))	
	            .add(createServiceDependency()
	                	.setService(HeartbeatHandler.class)
	                	.setRequired(true))	
	            .add(createServiceDependency()
	                	.setService(AnnouncementRegistry.class)
	                	.setRequired(true))	
	            .add(createServiceDependency()
	                	.setService(ClusterViewServiceImpl.class)
	                	.setRequired(true))	
	            .add(createServiceDependency()
	                	.setService(Config.class)
	                	.setRequired(true))	
	            .add(createServiceDependency()
	                	.setService(SyncTokenService.class)
	                	.setRequired(true))	
	            ;
		dm.add(component);


		//TopologyWebConsolePlugin
		properties = new Properties();
		properties.put(Constants.SERVICE_VENDOR, "The Apache Software Foundation");
		properties.put(Constants.SERVICE_DESCRIPTION, "Apache Sling Web Console Plugin to display Background servlets and ExecutionEngine status");
		properties.put(WebConsoleConstants.PLUGIN_LABEL, TopologyWebConsolePlugin.LABEL);
		properties.put(WebConsoleConstants.PLUGIN_TITLE, TopologyWebConsolePlugin.TITLE);
		properties.put("felix.webconsole.category","Sling");
		properties.put("felix.webconsole.configprinter.modes", new String[]{"zip"});
	    
		component = dm.createComponent()
				.setInterface(new String[]  { TopologyEventListener.class.getName(), Servlet.class.getName() }, properties)
				.setImplementation(TopologyWebConsolePlugin.class)
				.setCallbacks(null,"activate","deactivate", null)//init, start, stop and destroy.
	            .add(createServiceDependency().setService(ClusterViewService.class).setRequired(true))
	            .add(createServiceDependency().setService(AnnouncementRegistry.class).setRequired(true))
	            .add(createServiceDependency().setService(ConnectorRegistry.class).setRequired(true))
	            .add(createServiceDependency().setService(SyncTokenService.class).setRequired(true))
	            .add(createServiceDependency().setService(Config.class).setRequired(true));
		dm.add(component);	

		//Config
		properties = new Properties();
		properties.put(Constants.SERVICE_VENDOR, "The Apache Software Foundation");
		properties.put(Config.HEARTBEAT_TIMEOUT_KEY,Config.DEFAULT_HEARTBEAT_TIMEOUT);
		properties.put(Config.HEARTBEAT_INTERVAL_KEY,Config.DEFAULT_HEARTBEAT_INTERVAL);
		properties.put(Config.MIN_EVENT_DELAY_KEY,Config.DEFAULT_MIN_EVENT_DELAY);
		properties.put(Config.CONNECTION_TIMEOUT_KEY,Config.DEFAULT_CONNECTION_TIMEOUT);
		properties.put(Config.SO_TIMEOUT_KEY,Config.DEFAULT_SO_TIMEOUT);
		properties.put(Config.,Config.);
		properties.put(Config.,Config.);
		properties.put(Config.,Config.);
		properties.put(Config.,Config.);
		

	    /** Name of the repository descriptor to be taken into account for leader election:
	        those instances have preference to become leader which have the corresponding descriptor value of 'false' */
	    @Property
	    public static final String LEADER_ELECTION_REPOSITORY_DESCRIPTOR_NAME_KEY = "leaderElectionRepositoryDescriptor";
	    
	    /**
	     * Whether or not (default false) the leaderElectionRepositoryDescriptor should be inverted (if that one
	     * is configured at all).
	     */
	    @Property(boolValue=false)
	    public static final String INVERT_REPOSITORY_DESCRIPTOR_NAME_KEY = "invertRepositoryDescriptor";
	    
	    /** URLs where to join a topology, eg http://localhost:4502/libs/sling/topology/connector */
	    @Property(cardinality=1024)
	    public static final String TOPOLOGY_CONNECTOR_URLS_KEY = "topologyConnectorUrls";
	    private URL[] topologyConnectorUrls = {null};

	    /** list of ips and/or hostnames which are allowed to connect to /libs/sling/topology/connector */
	    private static final String[] DEFAULT_TOPOLOGY_CONNECTOR_WHITELIST = {"localhost","127.0.0.1"};
	    @Property(value={"localhost","127.0.0.1"})
	    public static final String TOPOLOGY_CONNECTOR_WHITELIST_KEY = "topologyConnectorWhitelist";
	    private String[] topologyConnectorWhitelist = DEFAULT_TOPOLOGY_CONNECTOR_WHITELIST;

	    /** Path of resource where to keep discovery information, e.g /var/discovery/impl/ */
	    private static final String DEFAULT_DISCOVERY_RESOURCE_PATH = "/var/discovery/impl/";
	    @Property(value=DEFAULT_DISCOVERY_RESOURCE_PATH, propertyPrivate=true)
	    public static final String DISCOVERY_RESOURCE_PATH_KEY = "discoveryResourcePath";
	    private String discoveryResourcePath = DEFAULT_DISCOVERY_RESOURCE_PATH;

	    /**
	     * If set to true, local-loops of topology connectors are automatically stopped when detected so.
	     */
	    @Property(boolValue=false)
	    private static final String AUTO_STOP_LOCAL_LOOP_ENABLED = "autoStopLocalLoopEnabled";

	    /**
	     * If set to true, request body will be gzipped - only works if counter-part accepts gzip-requests!
	     */
	    @Property(boolValue=false)
	    private static final String GZIP_CONNECTOR_REQUESTS_ENABLED = "gzipConnectorRequestsEnabled";

	    /**
	     * If set to true, hmac is enabled and the white list is disabled.
	     */
	    @Property(boolValue=false)
	    private static final String HMAC_ENABLED = "hmacEnabled";

	    /**
	     * If set to true, and the whitelist is disabled, messages will be encrypted.
	     */
	    @Property(boolValue=false)
	    private static final String ENCRYPTION_ENABLED = "enableEncryption";

	    /**
	     * The value fo the shared key, shared amongst all instances in the same cluster.
	     */
	    @Property
	    private static final String SHARED_KEY = "sharedKey";

	    /**
	     * The default lifetime of a HMAC shared key in ms. (4h)
	     */
	    private static final long DEFAULT_SHARED_KEY_INTERVAL = 3600*1000*4;

	    @Property(longValue=DEFAULT_SHARED_KEY_INTERVAL)
	    private static final String SHARED_KEY_INTERVAL = "hmacSharedKeyTTL";
	    
	    /**
	     * The property for defining the backoff factor for standby (loop) connectors
	     */
	    @Property
	    private static final String BACKOFF_STANDBY_FACTOR = "backoffStandbyFactor";
	    private static final int DEFAULT_BACKOFF_STANDBY_FACTOR = 5;
	    
	    /**
	     * The property for defining the maximum backoff factor for stable connectors
	     */
	    @Property
	    private static final String BACKOFF_STABLE_FACTOR = "backoffStableFactor";
	    private static final int DEFAULT_BACKOFF_STABLE_FACTOR = 5;
	    
	    /**
	     * when set to true and the syncTokenService (of discovery.commons) is available,
	     * then it is used
	     */
	    @Property(boolValue=true)
	    private static final String USE_SYNC_TOKEN_SERVICE_ENABLED = "useSyncTokenService";
	    
		component = dm.createComponent()
				.setInterface(new String[]{ Config.class.getName(), BaseConfig.class.getName(), DiscoveryLiteConfig.class.getName() }, properties)
				.setImplementation(Config.class)
				.setCallbacks(null,"activate",null, null)//init, start, stop and destroy.
	            .add(createConfigurationDependency()
	                	.setPid(Config.class.getName()));
		dm.add(component);		
		
		//ConnectorRegistry
		properties = new Properties();
		properties.put(Constants.SERVICE_VENDOR, "The Apache Software Foundation");
		component = dm.createComponent()
				.setInterface(ConnectorRegistry.class.getName(), properties)
				.setImplementation(ConnectorRegistry.class)
				.setCallbacks(null,"activate",null, null)//init, start, stop and destroy.
	            .add(createServiceDependency()
	                	.setService(AnnouncementRegistry.class)
	                	.setRequired(true))
	            .add(createServiceDependency()
	                	.setService(BaseConfig.class)
	                	.setRequired(true));
		dm.add(component);	
		
		//TopologyConnectorServlet
		properties = new Properties();
		properties.put(Constants.SERVICE_VENDOR, "The Apache Software Foundation");
		component = dm.createComponent()
				.setInterface(TopologyConnectorServlet.class.getName(), properties)
				.setImplementation(TopologyConnectorServlet.class)
				.setCallbacks(null,"activate","deactivate", null)//init, start, stop and destroy.
	            .add(createServiceDependency()
	                	.setService(AnnouncementRegistry.class)
	                	.setRequired(true))
	            .add(createServiceDependency()
	                	.setService(ClusterViewService.class)
	                	.setRequired(true))
	            .add(createServiceDependency()
	                	.setService(HttpService.class)
	                	.setRequired(true))
	            .add(createServiceDependency()
	                	.setService(BaseConfig.class)
	                	.setRequired(true));
		dm.add(component);	
	}
}