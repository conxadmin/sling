package org.apache.sling.commons.scheduler.impl;


import java.util.Properties;

import javax.servlet.Servlet;
import javax.servlet.ServletRequestListener;

import org.apache.felix.dm.DependencyActivatorBase;
import org.apache.felix.dm.DependencyManager;
import org.apache.sling.api.auth.Authenticator;
import org.apache.sling.api.resource.ResourceResolverFactory;
import org.apache.sling.commons.scheduler.Scheduler;
import org.apache.sling.commons.threads.ThreadPoolManager;
import org.apache.sling.discovery.TopologyEventListener;
import org.apache.felix.dm.Component;
import org.osgi.framework.BundleContext;
import org.osgi.framework.Constants;
import org.osgi.service.event.EventAdmin;

public class Activator extends DependencyActivatorBase {

	@Override
	public void destroy(BundleContext arg0, DependencyManager arg1) throws Exception {

	}

	@Override
	public void init(BundleContext arg0, DependencyManager dm) throws Exception {
		//QuartzScheduler
		Properties properties = new Properties();
		properties.put(Constants.SERVICE_VENDOR, "The Apache Software Foundation");
		Component component = dm.createComponent()
				.setInterface(QuartzScheduler.class.getName(), properties)
				.setImplementation(QuartzScheduler.class)
				.setCallbacks(null,"activate","deactivate", null)//init, start, stop and destroy.
	            .add(createServiceDependency()
	                	.setService(ThreadPoolManager.class)
	                	.setRequired(true))
	            .add(createConfigurationDependency().setPid(QuartzScheduler.class.getName()));
		 dm.add(component);
		 
		 //SchedulerServiceFactory
		properties = new Properties();
		properties.put(Constants.SERVICE_VENDOR, "The Apache Software Foundation");
		component = dm.createComponent()
				.setInterface(Scheduler.class.getName(), properties)
				.setImplementation(SchedulerServiceFactory.class)
				.setCallbacks(null,"activate","deactivate", null)//init, start, stop and destroy.
				.add(createServiceDependency().setService(QuartzScheduler.class).setRequired(true));
		dm.add(component);	 
		
		 //SettingsSupport
		properties = new Properties();
		properties.put(Constants.SERVICE_VENDOR, "The Apache Software Foundation");
		component = dm.createComponent()
				.setInterface(Object.class.getName(), properties)
				.setImplementation(SettingsSupport.class)
				.setCallbacks(null,"activate","deactivate", null)//init, start, stop and destroy.
				;
		dm.add(component);	 

		 //TopologyHandler
		properties = new Properties();
		properties.put(Constants.SERVICE_VENDOR, "The Apache Software Foundation");
		component = dm.createComponent()
				.setInterface(TopologyEventListener.class.getName(), properties)
				.setImplementation(TopologyHandler.class)
				.setCallbacks(null,"activate","deactivate", null)//init, start, stop and destroy.
				;
		dm.add(component);	
		
		//EngineSlingAuthenticator
		properties = new Properties();
		properties.put(Constants.SERVICE_VENDOR, "The Apache Software Foundation");
		properties.put(Constants.SERVICE_DESCRIPTION, "Apache Sling Scheduler Configuration Printer");
		properties.put("felix.webconsole.label","slingscheduler");
		properties.put("felix.webconsole.title","Sling Scheduler");
		properties.put("felix.webconsole.configprinter.modes","always");
		component = dm.createComponent()
				.setInterface(Object.class.getName(), properties)
				.setImplementation(WebConsolePrinter.class)
				.add(createServiceDependency().setService(QuartzScheduler.class).setRequired(true));
		dm.add(component);	
	}

}