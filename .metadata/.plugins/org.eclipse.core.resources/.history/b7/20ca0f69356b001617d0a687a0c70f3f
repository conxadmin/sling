package org.apache.sling.event.impl;


import java.util.Properties;

import javax.servlet.GenericServlet;
import org.apache.felix.dm.DependencyActivatorBase;
import org.apache.felix.dm.DependencyManager;
import org.apache.sling.api.SlingConstants;
import org.apache.sling.api.servlets.ServletResolver;
import org.apache.sling.auth.core.AuthenticationSupport;
import org.apache.sling.commons.mime.MimeTypeService;
import org.apache.sling.commons.threads.ThreadPool;
import org.apache.sling.commons.threads.ThreadPoolManager;
import org.apache.sling.event.impl.jobs.JobConsumerManager;
import org.apache.sling.event.impl.jobs.JobManagerImpl;
import org.apache.sling.event.impl.jobs.Property;
import org.apache.sling.event.impl.support.ResourceHelper;
import org.apache.sling.event.jobs.JobManager;
import org.apache.sling.event.jobs.consumer.JobConsumer;
import org.apache.sling.event.jobs.consumer.JobExecutor;
import org.apache.sling.settings.SlingSettingsService;
import org.apache.felix.dm.Component;
import org.osgi.framework.BundleContext;
import org.osgi.framework.Constants;
import org.osgi.service.event.EventConstants;
import org.osgi.service.event.EventHandler;

public class Activator extends DependencyActivatorBase {

	@Override
	public void destroy(BundleContext arg0, DependencyManager arg1) throws Exception {

	}

	@Override
	public void init(BundleContext arg0, DependencyManager dm) throws Exception {
		//SlingMainServlet
		Properties properties = new Properties();
		properties.put(Constants.SERVICE_VENDOR, "The Apache Software Foundation");
		Component component = dm.createComponent()
				.setInterface(EnvironmentComponent.class.getName(), properties)
				.setImplementation(EnvironmentComponent.class)
				.setCallbacks(null,"activate","deactivate", null)//init, start, stop and destroy.
				.add(createServiceDependency().setService(EventingThreadPool.class)
						 .setCallbacks("bindThreadPool", "unbindThreadPool").setRequired(true))
				.add(createServiceDependency().setService(SlingSettingsService.class).setRequired(true))
	            ;
		dm.add(component);


		//EventingThreadPool
		properties = new Properties();
		properties.put(Constants.SERVICE_VENDOR, "The Apache Software Foundation");
		properties.put(Constants.SERVICE_DESCRIPTION,"Apache Sling Job Thread Pool");
		properties.put(EventingThreadPool.PROPERTY_POOL_SIZE,EventingThreadPool.DEFAULT_POOL_SIZE);
		component = dm.createComponent()
				.setInterface(EventingThreadPool.class.getName(), properties)
				.setImplementation(EventingThreadPool.class)
				.setCallbacks(null,"activate","deactivate", null)//init, start, stop and destroy.
				.add(createConfigurationDependency().setPid(EventingThreadPool.class.getName()))
				.add(createServiceDependency().setService(ThreadPoolManager.class).setRequired(true))
	            ;
		dm.add(component);	

		//JobConsumerManager
		properties = new Properties();
		properties.put(Constants.SERVICE_VENDOR, "The Apache Software Foundation");
		properties.put(Constants.SERVICE_DESCRIPTION, "Apache Sling Event Support");
		properties.put(JobConsumerManager.PROPERTY_WHITELIST, "*");
		properties.put(JobConsumerManager.PROPERTY_BLACKLIST, "");
		component = dm.createComponent()
				.setInterface(JobConsumerManager.class.getName(), properties)
				.setImplementation(JobConsumerManager.class)
				.setCallbacks(null,"activate","deactivate", null)//init, start, stop and destroy.
				.add(createServiceDependency().setService(JobConsumer.class)
						 .setCallbacks("bindJobConsumer", "unbindJobConsumer").setRequired(false))
				.add(createServiceDependency().setService(JobExecutor.class)
						 .setCallbacks("bindJobExecutor", "unbindJobExecutor").setRequired(false))				
	            .add(createConfigurationDependency()
	                	.setPid(JobConsumerManager.class.getName()))
	            ;
		dm.add(component);		
		
		//JobManagerImpl
		properties = new Properties();
		properties.put(Constants.SERVICE_VENDOR, "The Apache Software Foundation");
		properties.put(Constants.SERVICE_DESCRIPTION, "Implementation of the job manager.");
		properties.put("scheduler.period",  60L);
		properties.put("scheduler.concurrent",  false);
		properties.put(EventConstants.EVENT_TOPIC,  new String[]{SlingConstants.TOPIC_RESOURCE_ADDED,
                SlingConstants.TOPIC_RESOURCE_CHANGED,
                SlingConstants.TOPIC_RESOURCE_REMOVED,
                ResourceHelper.BUNDLE_EVENT_STARTED,
                ResourceHelper.BUNDLE_EVENT_UPDATED});
		component = dm.createComponent()
				.setInterface(new String[]{JobManager.class.getName(), EventHandler.class.getName(), Runnable.class.getName()}, properties)
				.setImplementation(JobManagerImpl.class)
				.setCallbacks(null,"activate","deactivate", null)//init, start, stop and destroy.
	            ;
		dm.add(component);	
		
		//RequestParameterSupportConfigurer
		properties = new Properties();
		properties.put(Constants.SERVICE_VENDOR, "The Apache Software Foundation");
		properties.put(Constants.SERVICE_DESCRIPTION, "Configures Sling's request parameter handling.");
		properties.put(RequestParameterSupportConfigurer.PROP_FIX_ENCODING,  Util.ENCODING_DIRECT);
		properties.put(RequestParameterSupportConfigurer.PROP_MAX_PARAMS, 10000);
		properties.put(RequestParameterSupportConfigurer.PROP_FILE_SIZE_THRESHOLD, 256000L);
		properties.put(RequestParameterSupportConfigurer.PROP_FILE_SIZE_MAX, -1L);
		properties.put(RequestParameterSupportConfigurer.PROP_MAX_REQUEST_SIZE, -1L);
		properties.put(RequestParameterSupportConfigurer.PROP_CHECK_ADDITIONAL_PARAMETERS, false);
	    
		component = dm.createComponent()
				.setInterface(RequestParameterSupportConfigurer.class.getName(), properties)
				.setImplementation(RequestParameterSupportConfigurer.class)
				.setCallbacks(null,"configure","configure", null)//init, start, stop and destroy.
				.add(createConfigurationDependency()
	                	.setPid(RequestParameterSupportConfigurer.class.getName()))
	            .add(createServiceDependency()
	                	.setService(SlingSettingsService.class)
	                	.setRequired(true))				
	            ;
		dm.add(component);	
	
	}

}