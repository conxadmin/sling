package org.apache.sling.scripting.core;


import java.io.Serializable;
import java.util.Properties;

import javax.servlet.Servlet;
import javax.servlet.ServletConfig;

import org.apache.felix.dm.DependencyActivatorBase;
import org.apache.felix.dm.DependencyManager;
import org.apache.felix.dm.tracker.ServiceTrackerCustomizer;
import org.apache.sling.api.resource.ResourceDecorator;
import org.apache.sling.api.resource.ResourceProvider;
import org.apache.sling.api.resource.ResourceProviderFactory;
import org.apache.sling.api.resource.ResourceResolverFactory;
import org.apache.sling.api.resource.observation.ResourceChangeListener;
import org.apache.sling.api.security.ResourceAccessSecurity;
import org.apache.sling.scripting.api.BindingsValuesProvidersByContext;
import org.apache.sling.scripting.api.ScriptCache;
import org.apache.sling.scripting.core.impl.BindingsValuesProvidersByContextImpl;
import org.apache.sling.scripting.core.impl.ScriptCacheConsolePlugin;
import org.apache.sling.scripting.core.impl.helper.SlingScriptEngineManager;
import org.apache.sling.serviceusermapping.ServiceUserMapper;
import org.apache.sling.settings.SlingSettingsService;
import org.apache.felix.dm.Component;
import org.osgi.framework.BundleContext;
import org.osgi.framework.Constants;
import org.osgi.service.event.EventAdmin;

public class Activator extends DependencyActivatorBase {

	@Override
	public void destroy(BundleContext arg0, DependencyManager arg1) throws Exception {

	}

	@Override
	public void init(BundleContext arg0, DependencyManager dm) throws Exception {
		//BindingsValuesProvidersByContextImpl
		Properties properties = new Properties();
		properties.put(Constants.SERVICE_VENDOR, "The Apache Software Foundation");
		Component component = dm.createComponent()
				.setInterface(new String[]{BindingsValuesProvidersByContext.class.getName(),ServiceTrackerCustomizer.class.getName()}, properties)
				.setImplementation(BindingsValuesProvidersByContextImpl.class)
				.setCallbacks(null,"activate","deactivate", null)//init, start, stop and destroy.
				.add(createServiceDependency().setService(SlingScriptEngineManager.class)
						.setRequired(true))
				.add(createServiceDependency().setService(EventAdmin.class)
						.setRequired(true))
				.add(createServiceDependency().setService(SlingSettingsService.class).setRequired(true))
	            ;
		dm.add(component);
		
		//ScriptCacheConsolePlugin
		properties = new Properties();
		properties.put(Constants.SERVICE_VENDOR, "The Apache Software Foundation");
	    properties.put(Constants.SERVICE_DESCRIPTION,"Script Cache");
	    properties.put("service.vendor","The Apache Software Foundation");
	    properties.put("felix.webconsole.label","scriptcache");
	    properties.put("felix.webconsole.title","Script Cache Status");
	    properties.put("felix.webconsole.category","Sling");
		component = dm.createComponent()
				.setInterface(new String[]{Servlet.class.getName(),ServletConfig.class.getName(),Serializable.class.getName()}, properties)
				.setImplementation(ScriptCacheConsolePlugin.class)
				.setCallbacks(null,"activate","deactivate", null)//init, start, stop and destroy.
				.add(createServiceDependency().setService(ScriptCacheConsolePlugin.class)
						.setRequired(true))
				.add(createServiceDependency().setService(ScriptCache.class)
						.setRequired(true))
	            ;
		dm.add(component);

	}

}