package org.apache.sling.discovery.impl;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Properties;

import org.apache.felix.dm.DependencyActivatorBase;
import org.apache.felix.dm.DependencyManager;
import org.apache.sling.api.resource.ResourceResolverFactory;
import org.apache.sling.discovery.DiscoveryService;
import org.apache.sling.discovery.PropertyProvider;
import org.apache.sling.discovery.TopologyEventListener;
import org.apache.sling.discovery.commons.providers.spi.base.SyncTokenService;
import org.apache.sling.discovery.impl.DiscoveryServiceImpl.ProviderInfo;
import org.apache.sling.discovery.impl.cluster.ClusterViewServiceImpl;
import org.apache.sling.discovery.impl.common.heartbeat.HeartbeatHandler;
import org.apache.sling.settings.SlingSettingsService;
import org.apache.felix.dm.Component;
import org.osgi.framework.BundleContext;
import org.osgi.framework.Constants;
import org.osgi.service.http.HttpService;

public class Activator extends DependencyActivatorBase {

	@Override
	public void destroy(BundleContext arg0, DependencyManager arg1) throws Exception {

	}

	@Override
	public void init(BundleContext arg0, DependencyManager dm) throws Exception {
		//AnnouncementRegistryImpl
		Properties properties = new Properties();
		properties.put(Constants.SERVICE_VENDOR, "The Apache Software Foundation");
		Component component = dm.createComponent()
				.setInterface(new String[]{ DiscoveryService.class.getName(), DiscoveryServiceImpl.class.getName() }, properties)
				.setImplementation(DiscoveryServiceImpl.class)
				.setCallbacks(null,"activate",null, null)//init, start, stop and destroy.
	            .add(createServiceDependency()
	                	.setService(SlingSettingsService.class)
	                	.setRequired(true))
	            .add(createServiceDependency()
	                	.setService(TopologyEventListener.class)
	                	.setRequired(true))
	            .add(createServiceDependency()
	                	.setService(ProviderInfo.class)
	                	.setRequired(true))	
	            .add(createServiceDependency()
	                	.setService(ResourceResolverFactory.class)
	                	.setRequired(true))
	            .add(createServiceDependency()
	                	.setService(Scheduler.class)
	                	.setRequired(true))	
	            .add(createServiceDependency()
	                	.setService(HeartbeatHandler.class)
	                	.setRequired(true))	
	            .add(createServiceDependency()
	                	.setService(AnnouncementRegistry.class)
	                	.setRequired(true))	
	            .add(createServiceDependency()
	                	.setService(ClusterViewServiceImpl.class)
	                	.setRequired(true))	
	            .add(createServiceDependency()
	                	.setService(Config.class)
	                	.setRequired(true))	
	            .add(createServiceDependency()
	                	.setService(SyncTokenService.class)
	                	.setRequired(true))	
	            ;
		dm.add(component);


		//ConnectorRegistry
		properties = new Properties();
		properties.put(Constants.SERVICE_VENDOR, "The Apache Software Foundation");
		component = dm.createComponent()
				.setInterface(ConnectorRegistry.class.getName(), properties)
				.setImplementation(ConnectorRegistry.class)
				.setCallbacks(null,"activate",null, null)//init, start, stop and destroy.
	            .add(createServiceDependency()
	                	.setService(AnnouncementRegistry.class)
	                	.setRequired(true))
	            .add(createServiceDependency()
	                	.setService(BaseConfig.class)
	                	.setRequired(true));
		dm.add(component);	
		
		//ConnectorRegistry
		properties = new Properties();
		properties.put(Constants.SERVICE_VENDOR, "The Apache Software Foundation");
		component = dm.createComponent()
				.setInterface(ConnectorRegistry.class.getName(), properties)
				.setImplementation(ConnectorRegistry.class)
				.setCallbacks(null,"activate",null, null)//init, start, stop and destroy.
	            .add(createServiceDependency()
	                	.setService(AnnouncementRegistry.class)
	                	.setRequired(true))
	            .add(createServiceDependency()
	                	.setService(BaseConfig.class)
	                	.setRequired(true));
		dm.add(component);		
		
		//ConnectorRegistry
		properties = new Properties();
		properties.put(Constants.SERVICE_VENDOR, "The Apache Software Foundation");
		component = dm.createComponent()
				.setInterface(ConnectorRegistry.class.getName(), properties)
				.setImplementation(ConnectorRegistry.class)
				.setCallbacks(null,"activate",null, null)//init, start, stop and destroy.
	            .add(createServiceDependency()
	                	.setService(AnnouncementRegistry.class)
	                	.setRequired(true))
	            .add(createServiceDependency()
	                	.setService(BaseConfig.class)
	                	.setRequired(true));
		dm.add(component);	
		
		//TopologyConnectorServlet
		properties = new Properties();
		properties.put(Constants.SERVICE_VENDOR, "The Apache Software Foundation");
		component = dm.createComponent()
				.setInterface(TopologyConnectorServlet.class.getName(), properties)
				.setImplementation(TopologyConnectorServlet.class)
				.setCallbacks(null,"activate","deactivate", null)//init, start, stop and destroy.
	            .add(createServiceDependency()
	                	.setService(AnnouncementRegistry.class)
	                	.setRequired(true))
	            .add(createServiceDependency()
	                	.setService(ClusterViewService.class)
	                	.setRequired(true))
	            .add(createServiceDependency()
	                	.setService(HttpService.class)
	                	.setRequired(true))
	            .add(createServiceDependency()
	                	.setService(BaseConfig.class)
	                	.setRequired(true));
		dm.add(component);	
	}
}