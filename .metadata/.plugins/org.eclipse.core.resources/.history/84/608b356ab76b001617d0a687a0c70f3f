package org.apache.sling.event.impl;


import java.util.Properties;

import javax.servlet.GenericServlet;
import org.apache.felix.dm.DependencyActivatorBase;
import org.apache.felix.dm.DependencyManager;
import org.apache.sling.api.SlingConstants;
import org.apache.sling.api.resource.ResourceResolverFactory;
import org.apache.sling.api.servlets.ServletResolver;
import org.apache.sling.auth.core.AuthenticationSupport;
import org.apache.sling.commons.mime.MimeTypeService;
import org.apache.sling.commons.scheduler.Scheduler;
import org.apache.sling.commons.threads.ThreadPool;
import org.apache.sling.commons.threads.ThreadPoolManager;
import org.apache.sling.event.impl.jobs.JobConsumerManager;
import org.apache.sling.event.impl.jobs.JobManagerImpl;
import org.apache.sling.event.impl.jobs.config.InternalQueueConfiguration;
import org.apache.sling.event.impl.jobs.config.InternalQueueConfigurationFactory;
import org.apache.sling.event.impl.jobs.config.JobManagerConfiguration;
import org.apache.sling.event.impl.jobs.config.Property;
import org.apache.sling.event.impl.jobs.config.QueueConfigurationManager;
import org.apache.sling.event.impl.jobs.config.Reference;
import org.apache.sling.event.impl.jobs.queues.QueueManager;
import org.apache.sling.event.impl.jobs.stats.StatisticsManager;
import org.apache.sling.event.impl.support.ResourceHelper;
import org.apache.sling.event.jobs.JobManager;
import org.apache.sling.event.jobs.consumer.JobConsumer;
import org.apache.sling.event.jobs.consumer.JobExecutor;
import org.apache.sling.event.jobs.jmx.QueuesMBean;
import org.apache.sling.settings.SlingSettingsService;
import org.apache.felix.dm.Component;
import org.osgi.framework.BundleContext;
import org.osgi.framework.Constants;
import org.osgi.service.cm.ManagedServiceFactory;
import org.osgi.service.event.EventAdmin;
import org.osgi.service.event.EventConstants;
import org.osgi.service.event.EventHandler;

public class Activator extends DependencyActivatorBase {

	@Override
	public void destroy(BundleContext arg0, DependencyManager arg1) throws Exception {

	}

	@Override
	public void init(BundleContext arg0, DependencyManager dm) throws Exception {
		//EnvironmentComponent
		Properties properties = new Properties();
		properties.put(Constants.SERVICE_VENDOR, "The Apache Software Foundation");
		Component component = dm.createComponent()
				.setInterface(EnvironmentComponent.class.getName(), properties)
				.setImplementation(EnvironmentComponent.class)
				.setCallbacks(null,"activate","deactivate", null)//init, start, stop and destroy.
				.add(createServiceDependency().setService(EventingThreadPool.class)
						 .setCallbacks("bindThreadPool", "unbindThreadPool").setRequired(true))
				.add(createServiceDependency().setService(SlingSettingsService.class).setRequired(true))
	            ;
		dm.add(component);


		//EventingThreadPool
		properties = new Properties();
		properties.put(Constants.SERVICE_VENDOR, "The Apache Software Foundation");
		properties.put(Constants.SERVICE_DESCRIPTION,"Apache Sling Job Thread Pool");
		component = dm.createComponent()
				.setInterface(EventingThreadPool.class.getName(), properties)
				.setImplementation(EventingThreadPool.class)
				.setCallbacks(null,"activate","deactivate", null)//init, start, stop and destroy.
				.add(createConfigurationDependency().setPid(EventingThreadPool.class.getName()))
				.add(createServiceDependency().setService(ThreadPoolManager.class).setRequired(true))
	            ;
		dm.add(component);	

		//JobManagerConfiguration
		properties = new Properties();
		properties.put(Constants.SERVICE_VENDOR, "The Apache Software Foundation");
		properties.put(Constants.SERVICE_DESCRIPTION, "This is the central service of the job handling.");
		properties.put(JobManagerConfiguration.PROPERTY_DISABLE_DISTRIBUTION, JobManagerConfiguration.DEFAULT_DISABLE_DISTRIBUTION);
		properties.put(JobManagerConfiguration.PROPERTY_LOG_DEPRECATION_WARNINGS, JobManagerConfiguration.DEFAULT_LOG_DEPRECATION_WARNINGS);
		properties.put(JobManagerConfiguration.PROPERTY_REPOSITORY_PATH, JobManagerConfiguration.DEFAULT_REPOSITORY_PATH);
		properties.put(JobManagerConfiguration.PROPERTY_LOG_DEPRECATION_WARNINGS, JobManagerConfiguration.DEFAULT_LOG_DEPRECATION_WARNINGS);
		properties.put(JobManagerConfiguration.PROPERTY_SCHEDULED_JOBS_PATH, JobManagerConfiguration.DEFAULT_SCHEDULED_JOBS_PATH);
		properties.put(JobManagerConfiguration.PROPERTY_BACKGROUND_LOAD_DELAY, JobManagerConfiguration.DEFAULT_BACKGROUND_LOAD_DELAY);

		component = dm.createComponent()
				.setInterface(JobConsumerManager.class.getName(), properties)
				.setImplementation(JobManagerConfiguration.class)
				.setCallbacks(null,"activate","deactivate", null)//init, start, stop and destroy.
				.add(createConfigurationDependency().setPid(JobManagerConfiguration.class.getName()))
				.add(createServiceDependency().setService(EnvironmentComponent.class).setRequired(true))
				.add(createServiceDependency().setService(ResourceResolverFactory.class).setRequired(true))
				.add(createServiceDependency().setService(QueueConfigurationManager.class).setRequired(true))
				.add(createServiceDependency().setService(Scheduler.class).setRequired(true))
	            ;
		dm.add(component);		

		//MainQueueConfiguration
		properties = new Properties();
		properties.put(Constants.SERVICE_VENDOR, "The Apache Software Foundation");
		properties.put(Constants.SERVICE_DESCRIPTION, "This is the central service of the job handling.");
		properties.put(JobManagerConfiguration.PROPERTY_DISABLE_DISTRIBUTION, JobManagerConfiguration.DEFAULT_DISABLE_DISTRIBUTION);
		properties.put(JobManagerConfiguration.PROPERTY_LOG_DEPRECATION_WARNINGS, JobManagerConfiguration.DEFAULT_LOG_DEPRECATION_WARNINGS);
		properties.put(JobManagerConfiguration.PROPERTY_REPOSITORY_PATH, JobManagerConfiguration.DEFAULT_REPOSITORY_PATH);
		properties.put(JobManagerConfiguration.PROPERTY_LOG_DEPRECATION_WARNINGS, JobManagerConfiguration.DEFAULT_LOG_DEPRECATION_WARNINGS);
		properties.put(JobManagerConfiguration.PROPERTY_SCHEDULED_JOBS_PATH, JobManagerConfiguration.DEFAULT_SCHEDULED_JOBS_PATH);
		properties.put(JobManagerConfiguration.PROPERTY_BACKGROUND_LOAD_DELAY, JobManagerConfiguration.DEFAULT_BACKGROUND_LOAD_DELAY);

		component = dm.createComponent()
				.setInterface(JobConsumerManager.class.getName(), properties)
				.setImplementation(JobManagerConfiguration.class)
				.setCallbacks(null,"activate","deactivate", null)//init, start, stop and destroy.
				.add(createConfigurationDependency().setPid(JobManagerConfiguration.class.getName()))
				.add(createServiceDependency().setService(EnvironmentComponent.class).setRequired(true))
				.add(createServiceDependency().setService(ResourceResolverFactory.class).setRequired(true))
				.add(createServiceDependency().setService(QueueConfigurationManager.class).setRequired(true))
				.add(createServiceDependency().setService(Scheduler.class).setRequired(true))
	            ;
		dm.add(component);		

	
	}

}