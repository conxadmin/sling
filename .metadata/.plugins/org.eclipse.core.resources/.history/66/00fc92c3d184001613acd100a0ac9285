package org.apache.sling.auth.trusted.token.internal;


import java.util.Properties;

import javax.jcr.Repository;
import javax.servlet.Servlet;
import javax.servlet.http.HttpServletResponse;

import org.apache.felix.dm.DependencyActivatorBase;
import org.apache.felix.dm.DependencyManager;
import org.apache.sling.api.resource.ResourceResolverFactory;
import org.apache.sling.auth.core.spi.AuthenticationFeedbackHandler;
import org.apache.sling.auth.core.spi.AuthenticationHandler;
import org.apache.sling.auth.trusted.token.api.TrustedTokenService;
import org.apache.sling.auth.trusted.token.api.http.cache.DynamicContentResponseCache;
import org.apache.sling.jcr.api.SlingRepository;
import org.apache.felix.dm.Component;
import org.osgi.framework.BundleContext;
import org.osgi.framework.Constants;
import org.osgi.service.cm.ManagedService;
import org.osgi.service.http.HttpService;

public class Activator extends DependencyActivatorBase {

	@Override
	public void destroy(BundleContext arg0, DependencyManager arg1) throws Exception {

	}

	@Override
	public void init(BundleContext arg0, DependencyManager dm) throws Exception {
		//TrustedAuthenticationHandler
		Properties properties = new Properties();
		properties.put(Constants.SERVICE_PID,TrustedAuthenticationHandler.class.getName());
		properties.put(Constants.SERVICE_VENDOR, "The Apache Software Foundation");
		properties.put(Constants.SERVICE_DESCRIPTION, "Apache Sling TrustedAuthenticationHandler");
		properties.put("path","/");
		Component component = dm.createComponent()
				.setInterface(AuthenticationHandler.class.getName(), properties)
				.setImplementation(TrustedAuthenticationHandler.class)
				.setCallbacks(null,"activate",null, null)//init, start, stop and destroy.
	            .add(createServiceDependency()
	                	.setService(TrustedTokenService.class)
	                	.setRequired(true))
	            .add(createServiceDependency()
	                	.setService(DynamicContentResponseCache.class)
	                	.setRequired(true))	            
	            ;
		 dm.add(component);
		 
		//TrustedAuthenticationServlet
		properties = new Properties();
		properties.put(Constants.SERVICE_PID,TrustedAuthenticationServlet.class.getName());
		properties.put(Constants.SERVICE_VENDOR, "The Apache Software Foundation");
		properties.put(Constants.SERVICE_DESCRIPTION, "Trusted Authentication Servlet");
		properties.put("path","/system/trustedauth");
		properties.put("sakai.auth.trusted.destination.default","/dev");
		properties.put("sakai.auth.trusted.nouserlocationformat","/system/trustedauth-nouser?u={0}");
	    properties.put("sakai.auth.trusted.path.registration","/system/trustedauth");
        
		component = dm.createComponent()
				.setInterface(new String[] {Servlet.class.getName()}, properties)
				.setImplementation(TrustedAuthenticationServlet.class)
				.setCallbacks("init","activate","deactivate", null)//init, start, stop and destroy.
				.add(createServiceDependency()
	                	.setService(SlingRepository.class)
	                	.setRequired(true))
	            .add(createServiceDependency()
	                	.setService(HttpService.class)
	                	.setRequired(true))
	            .add(createServiceDependency()
	                	.setService(TrustedTokenService.class)
	                	.setRequired(true))
	            ;
		dm.add(component);
		
		//TrustedAuthenticationServlet
		properties = new Properties();
		properties.put(Constants.SERVICE_PID,TrustedTokenServiceImpl.class.getName());
		properties.put(Constants.SERVICE_VENDOR, "The Apache Software Foundation");
		properties.put("sakai.auth.trusted.token.usesession",false);
		properties.put("sakai.auth.trusted.token.securecookie",false);
		properties.put("sakai.auth.trusted.token.ttl",1200000);
	    properties.put("sakai.auth.trusted.token.name","sakai-trusted-authn");
	    properties.put("sakai.auth.trusted.token.storefile","sling/cookie-keystore.bin");
	    properties.put("sakai.auth.trusted.server.secret","default-setting-change-before-use");
	    
	    /** Property to invalidate if the session should be used. */
	    @Property(boolValue = false)
	    public static final String USE_SESSION = "sakai.auth.trusted.token.usesession";

	    /** Property to indicate if only cookies should be secure */
	    @Property(boolValue = false)
	    public static final String SECURE_COOKIE = "sakai.auth.trusted.token.securecookie";

	    /** Property to indicate the TTL on cookies */
	    @Property(longValue = 1200000)
	    public static final String TTL = "sakai.auth.trusted.token.ttl";

	    /** Property to indicate the name of the cookie. */
	    @Property(value = "sakai-trusted-authn")
	    public static final String COOKIE_NAME = "sakai.auth.trusted.token.name";

	    /** Property to point to keystore file */
	    @Property(value = "sling/cookie-keystore.bin")
	    public static final String TOKEN_FILE_NAME = "sakai.auth.trusted.token.storefile";

	    /** Property to contain the shared secret used by all trusted servers */
	    @Property(value = "default-setting-change-before-use")
	    public static final String SERVER_TOKEN_SHARED_SECRET = "sakai.auth.trusted.server.secret";

	    /** True if server tokens are enabled. */
	    @Property(boolValue=true)
	    public static final String SERVER_TOKEN_ENABLED = "sakai.auth.trusted.server.enabled";

	    /** A list of all the known safe hosts to trust as servers */
	    @Property(value ="localhost;127.0.0.1;0:0:0:0:0:0:0:1%0")
	    public static final String SERVER_TOKEN_SAFE_HOSTS_ADDR = "sakai.auth.trusted.server.safe-hostsaddress";
	                                                                                                                                                                                                                                                                                                                    
	    private static final String DEFAULT_WRAPPERS = "org.sakaiproject.nakamura.formauth.FormAuthenticationTokenServiceWrapper;org.sakaiproject.nakamura.auth.saml.SamlAuthenticationTokenServiceWrapper;org.sakaiproject.nakamura.auth.rest.RestAuthenticationTokenServiceWrapper;org.sakaiproject.nakamura.auth.cas.CasAuthenticationTokenServiceWrapper;org.sakaiproject.nakamura.http.usercontent.UserContentAuthenticationTokenServiceWrapper";
	    @Property(value = DEFAULT_WRAPPERS)
	    public static final String SERVER_TOKEN_SAFE_WRAPPERS = "sakai.auth.trusted.wrapper.class.names";

	    @Property(value="")
	    public static final String TRUSTED_HEADER_NAME = "sakai.auth.trusted.header";

	    @Property(value="")
	    public static final String TRUSTED_PARAMETER_NAME = "sakai.auth.trusted.request-parameter";

	    /** A list of all the known safe hosts to trust for authentication purposes, ie front end proxies */
	    @Property(value ="")
	    public static final String TRUSTED_PROXY_SERVER_ADDR = "sakai.auth.trusted.server.safe-authentication-addresses";

	    @Property(boolValue=false )
	    public static final String DEBUG_COOKIES = "sakai.auth.trusted.token.debugcookies";
        
		component = dm.createComponent()
				.setInterface(new String[] {TrustedTokenService.class.getName()}, properties)
				.setImplementation(TrustedTokenServiceImpl.class)
				.setCallbacks("init","activate","deactivate", null)//init, start, stop and destroy.
				.add(createServiceDependency()
	                	.setService(SlingRepository.class)
	                	.setRequired(true))
	            .add(createServiceDependency()
	                	.setService(HttpService.class)
	                	.setRequired(true))
	            .add(createServiceDependency()
	                	.setService(TrustedTokenService.class)
	                	.setRequired(true))
	            ;
		dm.add(component);		
	}

}